● class 정의 방법

	1단계 : 추상화 -> 멤버데이터가 무엇이 필요할까 -> 찾아내는 작업 -> 키추출, 후보리스트 작성

	2단계 : 캡슐화(정보은닉) -> 1단계 리스트를 클래스 다이어그램에 배치.
	        -> instance 멤버를 만들어서 넣는 것이 캡슐화
	      -> instance member variable ( = non-static variable) : 인스턴스 되기전에는 사용할 수 없는 변수.

	      ** OOP의 모든 개념은 instance 변수에만 적용한다.

	      - static 변수나 상수는 인스턴스 변수가 아니다.
	         -> static 변수는 인스턴스 멤버 변수를 관리하기 위하여 존재한다.

	      - 처음에 키추출로 instance 변수를 뽑아내고, 이후에 이 변수들을 관리하거나 공유되는 부분이 있으면 static 변수로 뽑아낸다.


● 정보은닉(Information Hiding)
	
	- Data Hiding (필수!)

	- Implemontation Hiding (구현부)
	  --> OOP적 관점에서는 선택이지만, 실제로는 중요한 메소드는 숨기는것이 당연하다! 핵심 기술들을 공개 할 순 없으니까!

	- 데이터의 접근제어자를 private로 hiding하고 그 데이터를 제어하기 위한 메소드(getter, setter 메소드)를 만드는것이 캡슐화이다.

	- 모든 멤버 data를 private으로 하고 모든 data의 set, get 메소드를 만드는것이 기본 룰이다.


● 캡슐화

	- 키추출을 통해 멤버변수와 메소드를 지정하고, 변수의 접근제어자를 private으로 해서 data hiding을 하고 그 변수에 접근할 수 있는 메소드를 정의하고 
	  객체를 생성할 때 가능한 의미있는 데이터로 생성하자! 라는 룰에 따라 생성자 오버로딩 메소드들을 만드는 것!

--------------------------------------------------------------------------------------------------------------------------------


○ 변수 선언 구문.

	- [ 제어자 ]  type 식별자 
	   -> modifier  -> 1. private, public, protected, (default) (access modifier 접근제어자)  --> 반드시 1개는 지정해야 한다. 지정하지 않을경우에는 default가 기본.
	   				-> 2. static ...
	   				-> 3. final ...
	   
	   제어자 자리에는 n개가 올 수 있는데, 이때 제어자들의 순서는 상관이 없다. -> 하지만 보통 access modifier부터 작성한다.
	   	private final  ==  final private
    
    - 제어자의 위치
    	변수 : type 앞에				ex) private int num;
    	메소드 : return type 앞에	  	ex) public void prn();



○ 생성자

	- 생성자란?




	