● 객체 (Object)

● 객체지향 (Object Oriented == Organized) : 객체로 조직화(조직된) 하기위한 개념 [추상화, 캡슐화, 상속, 다형성]
                                                    --> 각각 역할분담(각자의 하는일에 따라 분리한다.)  


○ 객체란?
	
	- 오감을 느낄수 있는 모든것은 객체를 생성할 수 있다. -> 모든것을 프로그래밍 할 수 있다.
	--> 객체를 만드려고 할 때는 그 단어의 일반적인 속성(일반화)를 떠올릴 것이 아니라, 
	    ** 어떤 관점에서(어떤 해결관점)에서 ** 그 객체를 볼것인지를 가장 먼저 정해야 한다.
	    어떤 관점이냐에 따라서 그 객체를 구성하는것이 달라진다.
	    같은 물체를 객체화 할 때, 그 객체가 필요한 상황에 따라 객체를 구성하는 성분이 달라질 수 있기 때문이다.


○ 객체를 설계하는 규칙(개념)

	- 추상화, 캡슐화
      -> 클래스 1개를 설계할 때 적용하는 개념.

	- 상속, 다형성
      -> 클래스 n개의 관계를 정의하는 개념(->조직화)


** OOP적 관점에서 가장 중요한 것은 여러사람의 의견을 모아서 여러사람이 가능한 모두 만족할 수 있는 제 3의 아이디어를 뽑아내는 것이다.
--> 가장 최상위는 일반화가 된(어떤 요구사항이라도 모두 해결할 수 있는) Class
--> 그래서 OOP적 관점에서 클래스를 설계할 때에는 최대한 모든 경우의 수를 생각해서 설계를 하는 것이 맞다.


---------------------------------------------------------------------------------------------------------------

○ 객체(Object)란? : Data를 캡슐화 한 것이다.

	- Class object : Logical object(논리 객체) ( + schema(인스턴스의 스키마) or blueprint for instance(청사진))
					--> 프로그램이 구동되기 전에 논리객체의 schema 정보가 heap 영역에 저장되어 있고,
					    그 정보를 가지고 물리객체를 생성하는 것이다.

	- Instance object : physical object(물리 객체)
					   --> 실행 프로그램 구동 + 인스턴스화 구문(객체 생성). 실행상대
					   						 -> Memory 로딩상태 -> 인스턴스화 구문하면 new allocator!
					   						 

      