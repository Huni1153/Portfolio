/// 1장
● 노드(Node.js)는 자바스크립트를 이용해서 서버를 만들 수 있는 개발 도구이다.

● 왜 노드를 사용해야 하는 것인가?
    - 노드는 2009년에 라이언 달 이라는 사람이 개발했는데 그 당시 웹 서버에 파일을 업로드할 때 업로드가 끝나기 전까지 다른 작업을 할 수 없었다.
    이러한 문제점을 해결하기위해 노드가 개발되었는데 하나의 요청이 끝날때 까지 기다리지 않고 다른 요청을 동시에 처리할 수 있는 
    비동기 입출력(논블로킹 입출력, Non-Bloking IO)방식을 적용했다.

● 노드의 대표적인 특징
    1. 비동기 입출력
    2. 이벤트 기반 입출력
    3. 노드의 모듈(파일)과 패키지(모듈의 집합)
    4. 자바스크립트 사용 - commonjs스펙을 따른다?

 ● Callback Function
        - 자바스크립트에서는 변수에 함수를 할당할 수 있다. 따라서 변수에 할당된 함수의 다른 함수의 파라미터로 전달할 수 있다.
        이렇게 파라미터로 전달된 함수를 다른 함수의 내부에서 호출하는 것이 콜백 함수이다. 1장에선 콜백함수가 있다라는 정도만 알고 3장에서 더욱 자세하게 다룬다고 한다.

/// 2장
● 전역 객체(Global Object)란?
    - 자바스크립트에서는 다른 언어들처럼 함수를 만들어 함수안에서 변수를 선언하여 사용할 수 있다.
    그런데 함수 안에서 선언한 변수는 그 함수 안에서만 유요하다. 즉, 그 함수 안에서만 사용할 수 있다.
    이와 달리 전역 객체는 함수 안과 밖에서 모두 사용할 수 있도록 범위를 제한하지 않는 객체이다. 따라서 코드의 어느 부분에서나 사용할 수 있다.
    

● 자바스크립트의 함수 호출방법
    - 함수를 정의할 때 그 앞에 fucntion 키워드를 붙여서 정의.
    이렇게 정의한 함수는 "함수명()" 이런식으로  호출한다.
    만약 객체 안에 함수가 정의되어 있다면 "객체이름.함수명()" 이런식으로 호출한다.
    노드는 자바스크립트 기반이기 때문에 자바스크립트의 함수 선언과 호출방식을 그대로 따른다

● exports와 module.expots의 차이  ※ module 폴더에 코드와함께 주석으로 부가 설명 ※
    - exports - 속성을 추가할 수 있어 여러 개의 변수나 함수를 각각의 속성으로 추가할 수 있다.
    - moudule.exports - 하나의 변수나 함수 또는 객체를 직접 할당한다. 일반적으로는 객체를 그대로
    할당하며, 이렇게 할당한 객체 안에 넣어 둔 변수나 함수를 메인 파일에서도 사용할 수 있다.
    ◎ 19.11.08_study/module_main.js 파일에서 코드로 확인해보자.

● require()함수 
    - 모듈을 불러올때 사용 하는 함수로 파라미터로 모듈 파일의 이름을 전달하는데 파일 이름 전체를 다 사용하지 않고 
    확장자를 뺀 파일의 이름만 파라미터로 보낸다. 파일이름에 ./를 붙인 것은 상대 패스로 지정했다는걸 뜻한다.
    하지만 해당 파일이 없다면 폴더 이름을 찾아 그안에 있는 파일을 불러들이기도 한다.
    에를 들면 require('./sum')를 호출했는데 해당 파일이 없다면 sum이라는 폴더가 있는지 확인하고 만약 sum이라는 폴더가 있다면
    그 안에 있는 index.js파일을 불러온다.
    즉, sum폴더를 만들고 그안에 index.js를 만들고 index.js 파일안에 sum에 해당하는 모듈 기능을 넣어두면 require('./sum')코드로 모듈 파일을 불러올 수 있다.

● 외장 모듈과 내장 모듈
    - 내장 모듈은 노드를 설치하고 나면 그안에 포함되어 있는 모듈을 내장 모듈이라고 한다. 내장 모듈에 대한 정보는 http://nodejs.org/api에서 확인할 수 있다.
    - 외장 모듈은 개발자들이 직접 만든 모듈로 npm으로 설치할 수 있다. 설치 방법은 cmd에서 설치 하고자하는 프로젝트 파일에 접근하여 npm init 명령어를 입력하면
    해당 폴더에 pakage.json 파일이 만들어지고 npm install nconf 하게되면 nconf라는 외장모듈이 설치되고 npm install nconf --save를 입력하게되면 설치와 동시에 pakage.json
    파일에 dependencies 속성이 추가되어 나중에 다른 프로젝트에 pakage.json 파일을 옮겨놓고 npm install만 입력하면 nconf등 사용자가 설치한 모든 외장모듈을 다른 프로젝트에 설치할 수 있다.
    아마도? npm init을 입력하지 않고 바로 npm install 하게되면 pakage-lock.json파일이 생성되는데 보면 엄청 많은 모듈이 있는것 같은데 .. 모르겠다
    
/// 3장
● 객체와 함수 이용
    - 자바나 C언어는 타입 기반의 언어는 메모리를 절약하기 위해 정수와 문자열을 만들 때 int, String과 같은 타입을 지정 하지만,
    자바스크립트에서는 자료형을 명시하지 않고 var 키워드 하나만을 사용해 선언하고 사용한다.
    
    ○ 자바                              ○ 자바스크립트
    
        ┌─ 10          ┌─ 문자열     　 　 ┌─ 10          ┌─ 문자열     
        │              │                  │              │
    ┌──────┐      ┌─────────┐          ┌──────┐      ┌─────────┐  
    │      │      │         │          │      │      │         │
    └──────┘      └─────────┘          └──────┘      └─────────┘
      int            String               var            var

    ○ 자바스크립트의 자료형
        - boolean : [기본 자료형]true와 false의 두 가지 값을 가지는 자료형
        - Number : [기본 자료형]64비트 형식의 IEEE 754 값이며 정수나 부동소수 값을 가지는 자료형
        몇 가지 상징적인 값을 가질 수 있음 ex)NaN(숫자가 아님), +무한대(Number.MAX_VALUE), -무한대(Number.MIN_VALUE)
        - String : [기본 자료형] 문자열 값을 가지는 자료형
        - undefined : 값을 할당하지 않은 변수의 값
        - null : 존재하지 않는 값을 가리키는 값
        - Object : 객체를 값으로 가지는 자료형
        객체는 속성들을 담고 있는 가방(Collection)으로 볼 수 있으며, 대표적인 객체로 Array나 Date를 들 수 있음.
        ※ 키워드는 var를 사용하지만 실제 저장할때 자료형에 따라 크기가 다르다. 그렇기 때문에 이를 확인하기 위해서는 typeof 연산자를 사용하여 확인이 가능하다.
        ※ 문자열을 숫자열로 변환할 수 있는 parsInt(),parsFloat()함수도 있다.

    ○ 객체의 선언과 초기화 방법    
        ◎ 19.11.11_study/ch3_test1 14번 line에 객체 선언방법을 코드로 확인해보자.

    ○ 함수
        - 자바스크립트는 자료형을 표시하지 않기 때문에 함수의 선언과 호출의 형대가 약간다르다.
        자바는 int add(int a,int b){...} 의 형태지만 자바스크립트는 var add = function(a,b){...};[익명 함수] 의 형태나 function add(a,b){...}로 사용한다.
        여기서 익명 함수로 변수에 할당할 떄는 함수를 선언하는 선언문이 아니라 일반 수식처럼 표현식이 되므로 마지막에 세미콜론(;)을 붙여 주는 것이 좋다. (안붙여도 되긴 된다...)
        자바에서 필드로 불리던 것을 노드에서는 속성이라고 부르는것 같다....
        ◎ 19.11.11_study/ch3_test1.js 43번 line에 코드로 확인해보자.

    ○ 배열
        - 자바에는 배열을 생성할 때 하나의 자료형을 지정해주게되면 그 지정한 자료형에 대한 정보만을 저장할 수 있다. 하지만 자바스크립트에서는 배열에 객체,숫자,문자열,함수를
        하나의 배열에 넣을 수 있다.

● 콜백함수 
    - 함수를 호출할때 다른 함수를 파라미터로 전달하거나 다른 함수 안에서 또 다른 함수를 만들어 반환할 수 있는 방법이다.
    대부분 비동기 프로그래밍(Non-Blocking Programming)방식으로 코드를 만들때 사용한다. 예를 들면 붕어빵을 사가려고하는데 사람이 너무 많아서 밀렸다
    그래서 전화번호를 주고, 내차례가 돌아오면 받아갈테니 전화를 달라고 하는 것과 같은 느낌이다.
    어떤 일을 다른 객체에게 시키고, 그 일이 끝나는 것을 기다리지 않고 그 객체가 나를 다시 부를때까지 내 할일을 하고 있는 것이다.
    그런데 만약 콜백인 함수에서 콜백을 사용하지 않게 된다면, 콜백 함수의 과정이 끝나기 전에 다음 프로세스를 진행하게 되는 경우가 있다.
    예를 들면 DB에서 값을 읽어들일 때 값을 읽어오기 전에 출력해버려서 계속 undefined가 뜨게 된다.
    
    ◎ 19.11.12_study/ch3_test2 ~ 19.11.13_study/ch3_test3에 코드로 확인해보자.
    
● 프로토타입
    - 자바스크립트 객체는 함수를 이용해서 만들 수도 있다. 그 이유는 함수도 객체이기 때문이다. 함수에 여러가지 기능과 속성이 추가되면서 객체 지향(Object oriented)언어에서 객체의 원형(Prototype)
    인 클래스를 만들고, 그 클래스에서 새로운 인스턴스 객체를 여러개 만들어 내듯이 자바스크립트에서도 객체의 원형을 정의한 후 그 원형에서 새로운 인스턴스 객체를 만들어 낼 수 있습니다.
    Java,C++과 같은 클래스 기반 객체지향 프로그래밍 언어와 달리 자바스크립트는 프로토타입 기반의 객체지향 프로그래밍 언어이다. 따라서 자바스크립트의 동작 원리를 이해하기 위해서는 프로토타입의
    개념을 잘 이해하고 있어야 한다.
    자바스크립트의 모든 객체는 자신의 부모 역할을 담당하는 객체와 연결되어 있다. 그리고 이것은 마치 객체 지향의 상속 개념과 같이 부모 객체의 프로퍼티 또는 메소드를 상속받아 사용할 수 있게한다.
    이러한 부모 객체를 Prototype(프로토타입)객체 또는 줄여서 Prototype(프로토타입)이라 한다. -- https://poiemaweb.com/js-prototype
    